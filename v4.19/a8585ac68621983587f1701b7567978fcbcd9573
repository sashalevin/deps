a8585ac68621 ("mm/page_counter: move calculating protection values to page_counter")
08e0f49e9991 ("mm/memcontrol: fix typo in comment")
c449d5599287 ("mm/memcg: non-hierarchical mode is deprecated")
45c7f7e1ef17 ("mm, memcg: decouple e{low,min} state mutations from protection checks")
22f7496f0b90 ("mm, memcg: avoid stale protection values when cgroup is above protection")
03960e33187a ("mm/memcontrol.c: prevent missed memory.low load tears")
cd324edce598 ("mm: memcontrol: handle div0 crash race condition in memory.low")
b3a7822e5e75 ("mm, memcg: prevent mem_cgroup_protected store tearing")
c3d532008661 ("mm, memcg: prevent memory.min load/store tearing")
f86b810c2610 ("mm, memcg: prevent memory.low load/store tearing")
8a931f801340 ("mm: memcontrol: recursive memory.low protection")
bc50bcc6e00b ("mm: memcontrol: clean up and document effective low/min calculations")
503970e42325 ("mm: memcontrol: fix memory.low proportional distribution")
0f6a5cff43d3 ("mm: vmscan: split shrink_node() into node part and memcgs part")
d2af339706be ("mm: vmscan: replace shrink_node() loop with a retry jump")
b5ead35e7e1d ("mm: vmscan: naming fixes: global_reclaim() and sane_reclaim()")
f87bccde6a7d ("mm/vmscan: remove unused lru_pages argument")
1bc63fb1272b ("mm, memcg: make scan aggression always exclude protection")
9de7ca46ad26 ("mm, memcg: make memory.emin the baseline for utilisation determination")
9783aa9917f8 ("mm, memcg: proportional memory.{low,min} reclaim")
