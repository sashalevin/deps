7ea981070fd9 ("powerpc/8xx: fix size given to set_huge_pte_at()")
935d4f0c6dc8 ("mm: hugetlb: add huge page size param to set_huge_pte_at()")
8a13897fb0da ("mm: userfaultfd: support UFFDIO_POISON for hugetlbfs")
af19487f00f3 ("mm: make PTE_MARKER_SWAPIN_ERROR more general")
c33c794828f2 ("mm: ptep_get() conversion")
c7ad08804fae ("mm/memory: handle_pte_fault() use pte_offset_map_nolock()")
3db82b9374ca ("mm/memory: allow pte_offset_map[_lock]() to fail")
895f5ee464cc ("mm/khugepaged: allow pte_offset_map[_lock]() to fail")
c9c1ee20ee84 ("mm/huge_memory: split huge pmd under one pte_offset_map()")
4b56069c95d6 ("mm/migrate_device: allow pte_offset_map_lock() to fail")
d850fa729873 ("mm/swapoff: allow pte_offset_map[_lock]() to fail")
f3cd4ab0aabf ("mm/madvise: clean up pte_offset_map_lock() scans")
04dee9e85cf5 ("mm/various: give up if pte_offset_map[_lock]() fails")
0d1c81edc61e ("mm/vmalloc: vmalloc_to_page() use pte_offset_kernel()")
7780d04046a2 ("mm/pagewalkers: ACTION_AGAIN if pte_offset_map_lock() fails")
2798bbe75b9c ("mm/page_vma_mapped: pte_offset_map_nolock() not pte_lockptr()")
90f43b0a13cd ("mm/page_vma_mapped: reformat map_pte() with less indentation")
45fe85e9811e ("mm/page_vma_mapped: delete bogosity in page_vma_mapped_walk()")
0cb8fd4d1416 ("mm/migrate: remove cruft from migration_entry_wait()s")
26e1a0c3277d ("mm: use pmdp_get_lockless() without surplus barrier()")
