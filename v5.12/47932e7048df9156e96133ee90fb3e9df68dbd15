47932e7048df ("mm: remove folio from deferred split list before uncharging it")
29f3843026cf ("mm: free folios directly in move_folios_to_lru()")
bc2ff4cbc329 ("mm: free folios in a batch in shrink_folio_list()")
d7f861b9c43a ("mm/mmu_gather: add __tlb_remove_folio_pages()")
da510964c095 ("mm/mmu_gather: define ENCODED_PAGE_FLAG_DELAY_RMAP")
c30d6bc8d015 ("mm/mmu_gather: pass "delay_rmap" instead of encoded page to __tlb_remove_page_size()")
c46265030b0f ("mm/memory: page_remove_rmap() -> folio_remove_rmap_pte()")
85a1333417a7 ("mm/swap: use dedicated entry for swap in folio")
c33c794828f2 ("mm: ptep_get() conversion")
c7ad08804fae ("mm/memory: handle_pte_fault() use pte_offset_map_nolock()")
3db82b9374ca ("mm/memory: allow pte_offset_map[_lock]() to fail")
895f5ee464cc ("mm/khugepaged: allow pte_offset_map[_lock]() to fail")
c9c1ee20ee84 ("mm/huge_memory: split huge pmd under one pte_offset_map()")
4b56069c95d6 ("mm/migrate_device: allow pte_offset_map_lock() to fail")
d850fa729873 ("mm/swapoff: allow pte_offset_map[_lock]() to fail")
f3cd4ab0aabf ("mm/madvise: clean up pte_offset_map_lock() scans")
04dee9e85cf5 ("mm/various: give up if pte_offset_map[_lock]() fails")
0d1c81edc61e ("mm/vmalloc: vmalloc_to_page() use pte_offset_kernel()")
7780d04046a2 ("mm/pagewalkers: ACTION_AGAIN if pte_offset_map_lock() fails")
2798bbe75b9c ("mm/page_vma_mapped: pte_offset_map_nolock() not pte_lockptr()")
