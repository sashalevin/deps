ddd6d8e975b1 ("mm: multi-gen LRU: remove MM_LEAF_OLD and MM_NONLEAF_TOTAL stats")
bceeeaed4817 ("mm: multi-gen LRU: ignore non-leaf pmd_young for force_scan=true")
7eb2d01a1bea ("mm/mglru: remove CONFIG_TRANSPARENT_HUGEPAGE")
61dd3f246b3a ("mm/mglru: add CONFIG_LRU_GEN_WALKS_MMU")
bb5e7f234eac ("Multi-gen LRU: avoid race in inc_min_seq()")
6080d19f0704 ("ksm: add ksm zero pages for each process")
e2942062e01d ("ksm: count all zero pages placed by KSM")
79271476b336 ("ksm: support unsharing KSM-placed zero pages")
c33c794828f2 ("mm: ptep_get() conversion")
c7ad08804fae ("mm/memory: handle_pte_fault() use pte_offset_map_nolock()")
3db82b9374ca ("mm/memory: allow pte_offset_map[_lock]() to fail")
895f5ee464cc ("mm/khugepaged: allow pte_offset_map[_lock]() to fail")
c9c1ee20ee84 ("mm/huge_memory: split huge pmd under one pte_offset_map()")
4b56069c95d6 ("mm/migrate_device: allow pte_offset_map_lock() to fail")
d850fa729873 ("mm/swapoff: allow pte_offset_map[_lock]() to fail")
f3cd4ab0aabf ("mm/madvise: clean up pte_offset_map_lock() scans")
04dee9e85cf5 ("mm/various: give up if pte_offset_map[_lock]() fails")
0d1c81edc61e ("mm/vmalloc: vmalloc_to_page() use pte_offset_kernel()")
7780d04046a2 ("mm/pagewalkers: ACTION_AGAIN if pte_offset_map_lock() fails")
2798bbe75b9c ("mm/page_vma_mapped: pte_offset_map_nolock() not pte_lockptr()")
