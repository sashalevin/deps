c99687a03a78 ("fold path_to_nameidata() into its only remaining caller")
a9dc1494a782 ("expand the only remaining call of path_lookup_conditional()")
161aff1d93ab ("LOOKUP_MOUNTPOINT: fold path_mountpointat() into path_lookupat()")
cbae4d12eeee ("fold handle_mounts() into step_into()")
aca2903eefd0 ("new step_into() flag: WALK_NOFOLLOW")
56676ec39019 ("step_into() callers: dismiss the symlink earlier")
20e343571cef ("lookup_fast(): take mount traversal into callers")
c153007b7b7a ("teach handle_mounts() to handle RCU mode")
b023e1728bec ("lookup_fast(): consolidate the RCU success case")
db3c9ade50b1 ("handle_mounts(): pass dentry in, turn path into a pure out argument")
e73cabff5917 ("do_last(): collapse the call of path_to_nameidata()")
da5ebf5aa676 ("lookup_open(): saner calling conventions (return dentry on success)")
239eb983383b ("atomic_open(): saner calling conventions (return dentry on success)")
bd7c4b508344 ("handle_mounts(): start building a sane wrapper for follow_managed()")
31d1726d7250 ("make build_open_flags() treat O_CREAT | O_EXCL as implying O_NOFOLLOW")
c64cd6e34ea3 ("reimplement path_mountpoint() with less magic")
2fa6b1e01a9b ("fs/namei.c: fix missing barriers when checking positivity")
6c2d4798a8d1 ("new helper: lookup_positive_unlocked()")
d41efb522e90 ("fs/namei.c: pull positivity check into follow_managed()")
6b61aed06a3b ("namei.h: get the comments on LOOKUP_... in sync with reality")
fbb7d9d56d16 ("kill LOOKUP_NO_EVAL, don't bother including namei.h from audit.h")
c9b07eab0c87 ("audit_inode(): switch to passing AUDIT_INODE_...")
39145f5f0cc9 ("filename_mountpoint(): make LOOKUP_NO_EVAL unconditional there")
ff0ebee239ce ("filename_lookup(): audit_inode() argument is always 0")
7d4006c161ad ("NFS: Update symbolic flags displayed by trace events")
38a638a72a34 ("NFS: Display symbolic status code names in trace log")
1fbf3e48123d ("Merge tag 'nfs-for-5.1-1' of git://git.linux-nfs.org/projects/trondmy/linux-nfs")
