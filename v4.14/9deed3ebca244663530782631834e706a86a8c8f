9deed3ebca24 ("new helper: traverse_mounts()")
a9dc1494a782 ("expand the only remaining call of path_lookup_conditional()")
c153007b7b7a ("teach handle_mounts() to handle RCU mode")
b023e1728bec ("lookup_fast(): consolidate the RCU success case")
db3c9ade50b1 ("handle_mounts(): pass dentry in, turn path into a pure out argument")
e73cabff5917 ("do_last(): collapse the call of path_to_nameidata()")
da5ebf5aa676 ("lookup_open(): saner calling conventions (return dentry on success)")
239eb983383b ("atomic_open(): saner calling conventions (return dentry on success)")
bd7c4b508344 ("handle_mounts(): start building a sane wrapper for follow_managed()")
31d1726d7250 ("make build_open_flags() treat O_CREAT | O_EXCL as implying O_NOFOLLOW")
1c9f5e06a613 ("follow_automount() doesn't need the entire nameidata")
26df6034fdb2 ("fix automount/automount race properly")
8f11538ebe98 ("do_add_mount(): lift lock_mount/unlock_mount into callers")
72ba29297e14 ("namei: LOOKUP_NO_XDEV: block mountpoint crossing")
4b99d4996979 ("namei: LOOKUP_NO_MAGICLINKS: block magic-link resolution")
278121417a72 ("namei: LOOKUP_NO_SYMLINKS: block symlink resolution")
740a16782750 ("namei: allow set_root() to produce errors")
1bc82070fa27 ("namei: allow nd_jump_link() to produce errors")
2fa6b1e01a9b ("fs/namei.c: fix missing barriers when checking positivity")
6c2d4798a8d1 ("new helper: lookup_positive_unlocked()")
d41efb522e90 ("fs/namei.c: pull positivity check into follow_managed()")
0ecee6699064 ("fs/namespace.c: fix use-after-free of mount in mnt_warn_timestamp_expiry()")
f8b92ba67c5d ("mount: Add mount warning for impending timestamp expiry")
8d0347f6c3a9 ("convert do_remount_sb() to fs_context")
c9ce29ed795f ("vfs_get_tree(): evict the call of security_sb_kern_mount()")
132e460848f4 ("new helper: do_new_mount_fc()")
a0c9a8b8fd9f ("teach vfs_get_tree() to handle subtype, switch do_new_mount() to it")
9bc61ab18b1d ("vfs: Introduce fs_context, switch vfs_kern_mount() to it.")
399504e21a10 ("fix cgroup_do_mount() handling of failure exits")
718c43038f28 ("mount_fs: suppress MAC on MS_SUBMOUNT as well as MS_KERNMOUNT")
204cc0ccf1d4 ("LSM: hide struct security_mnt_opts from any generic code")
5b4002391153 ("LSM: turn sb_eat_lsm_opts() into a method")
6a0440e5b756 ("nfs_remount(): don't leak, don't ignore LSM options quietly")
a65001e8a4d4 ("btrfs: sanitize security_mnt_opts use")
a10d7c22b34b ("LSM: split ->sb_set_mnt_opts() out of ->sb_kern_mount()")
f5c0c26d9008 ("new helper: security_sb_eat_lsm_opts()")
c039bc3c2498 ("LSM: lift extracting and parsing LSM options into the caller of ->sb_remount()")
6be8750b4cba ("LSM: lift parsing LSM options into the caller of ->sb_kern_mount()")
6466f3d193a9 ("smack: make smack_parse_opts_str() clean up on failure")
17f3b556a3e3 ("selinux: expand superblock_doinit() calls")
43f5e655eff7 ("vfs: Separate changing mount flags full remount")
e262e32d6bde ("vfs: Suppress MS_* flag defs within the kernel unless explicitly enabled")
57c8a661d95d ("mm: remove include/linux/bootmem.h")
97ad1087efff ("memblock: replace BOOTMEM_ALLOC_* with MEMBLOCK variants")
c6ffc5ca8fb3 ("memblock: rename free_all_bootmem to memblock_free_all")
53ab85ebfd27 ("memblock: replace free_bootmem_late with memblock_free_late")
2013288f7238 ("memblock: replace free_bootmem{_node} with memblock_free")
6c7835f8d0d1 ("mm: nobootmem: remove bootmem allocation APIs")
4fc4a09e4cc1 ("memblock: replace __alloc_bootmem with memblock_alloc_from")
ccfa2a0f2e85 ("memblock: replace __alloc_bootmem_node with appropriate memblock_ API")
