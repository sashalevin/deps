f6c7590b4e05 ("memcg: use a folio in get_mctgt_type_thp")
b46777da7d8d ("memcg: return the folio in union mc_target")
b267e1a3e45f ("memcg: convert mem_cgroup_move_charge_pte_range() to use a folio")
853f62a30422 ("mm: fix get_mctgt_type() kernel-doc")
f7f9c00dfaff ("mm: change to return bool for isolate_lru_page()")
be2d57563822 ("mm: change to return bool for folio_isolate_lru()")
4a64981dfee9 ("mm/mempolicy: convert migrate_page_add() to migrate_folio_add()")
3dae02bbd07f ("mm/mempolicy: convert queue_pages_pte_range() to queue_folios_pte_range()")
de1f5055523e ("mm/mempolicy: convert queue_pages_pmd() to queue_folios_pmd()")
07bb1fbaa2bb ("mm/damon/paddr: convert damon_pa_*() to use a folio")
f70da5ee8fe1 ("mm/damon: convert damon_pa_mark_accessed_or_deactivate() to use folios")
07e8c82b5eff ("madvise: convert madvise_cold_or_pageout_pte_range() to use folios")
18250e78f9c7 ("mm/damon/paddr: support DAMOS filters")
4e0cf05f6059 ("mm: memcontrol: skip moving non-present pages that are mapped elsewhere")
fd3b1bc3c86e ("mm/madvise: fix madvise_pageout for private file mappings")
7438899b0b8d ("folio-compat: remove try_to_release_page()")
64ab3195ea07 ("khugepage: replace try_to_release_page() with filemap_release_folio()")
ece62684dcfb ("hugetlbfs: convert hugetlb_delete_from_page_cache() to use folios")
241f68859656 ("mm/migrate_device.c: refactor migrate_vma and migrate_deivce_coherent_page()")
16ce101db85d ("mm/memory.c: fix race when faulting a device private page")
