3689c3ebdd54 ("fs/proc/task_mmu: account non-present entries as "maybe shared, but no idea how often"")
6401a2e69008 ("fs/proc/task_mmu: convert smaps_hugetlb_range() to work on folios")
039d26d10d62 ("proc: convert smaps_pmd_entry to use a folio")
27bb0a70e524 ("proc: pass a folio to smaps_page_accumulate()")
6c977f36dc36 ("proc: convert smaps_account() to use a folio")
8b47933544a6 ("proc/ksm: add ksm stats to /proc/pid/smaps")
8b9c1cc0418a ("smaps: use vm_normal_page_pmd() instead of follow_trans_huge_pmd()")
c33c794828f2 ("mm: ptep_get() conversion")
c7ad08804fae ("mm/memory: handle_pte_fault() use pte_offset_map_nolock()")
3db82b9374ca ("mm/memory: allow pte_offset_map[_lock]() to fail")
895f5ee464cc ("mm/khugepaged: allow pte_offset_map[_lock]() to fail")
c9c1ee20ee84 ("mm/huge_memory: split huge pmd under one pte_offset_map()")
4b56069c95d6 ("mm/migrate_device: allow pte_offset_map_lock() to fail")
d850fa729873 ("mm/swapoff: allow pte_offset_map[_lock]() to fail")
f3cd4ab0aabf ("mm/madvise: clean up pte_offset_map_lock() scans")
04dee9e85cf5 ("mm/various: give up if pte_offset_map[_lock]() fails")
0d1c81edc61e ("mm/vmalloc: vmalloc_to_page() use pte_offset_kernel()")
7780d04046a2 ("mm/pagewalkers: ACTION_AGAIN if pte_offset_map_lock() fails")
2798bbe75b9c ("mm/page_vma_mapped: pte_offset_map_nolock() not pte_lockptr()")
90f43b0a13cd ("mm/page_vma_mapped: reformat map_pte() with less indentation")
