ebb34f78d72c ("mm: convert folio_estimated_sharers() to folio_likely_mapped_shared()")
cc864ebba5f6 ("madvise:madvise_cold_or_pageout_pte_range(): allow split while folio_estimated_sharers = 0")
1cb5d11a370f ("mempolicy: fix migrate_pages(2) syscall return nr_failed")
6695cf68b15c ("mm: memory: use a folio in do_numa_page()")
73eab3ca481e ("mm: migrate: convert migrate_misplaced_page() to migrate_misplaced_folio()")
2ac9e99f3b21 ("mm: migrate: convert numamigrate_isolate_page() to numamigrate_isolate_folio()")
24526268f4e3 ("mm: mempolicy: keep VMA walk if both MPOL_MF_STRICT and MPOL_MF_MOVE are specified")
0e0e9bd5f7b9 ("madvise:madvise_free_pte_range(): don't use mapcount() against large folio for sharing check")
20b18aada185 ("madvise:madvise_free_huge_pmd(): don't use mapcount() against large folio for sharing check")
2f406263e3e9 ("madvise:madvise_cold_or_pageout_pte_range(): don't use mapcount() against large folio for sharing check")
49b0638502da ("mm: enable page walking API to lock vmas during the walk")
6c21e066f925 ("mm/mempolicy: Take VMA lock before replacing policy")
c33c794828f2 ("mm: ptep_get() conversion")
c7ad08804fae ("mm/memory: handle_pte_fault() use pte_offset_map_nolock()")
3db82b9374ca ("mm/memory: allow pte_offset_map[_lock]() to fail")
895f5ee464cc ("mm/khugepaged: allow pte_offset_map[_lock]() to fail")
c9c1ee20ee84 ("mm/huge_memory: split huge pmd under one pte_offset_map()")
4b56069c95d6 ("mm/migrate_device: allow pte_offset_map_lock() to fail")
d850fa729873 ("mm/swapoff: allow pte_offset_map[_lock]() to fail")
f3cd4ab0aabf ("mm/madvise: clean up pte_offset_map_lock() scans")
