8eca68e2cfdf ("khugepaged: pass a folio to __collapse_huge_page_copy()")
0234779276e5 ("khugepaged: remove hpage from collapse_huge_page()")
d5ab50b9412c ("khugepaged: convert alloc_charge_hpage to alloc_charge_folio")
4746f5ce0fa5 ("khugepaged: inline hpage_collapse_alloc_folio()")
5432726848bb ("mm: convert collapse_huge_page() to use a folio")
b455f39d2289 ("mm/khugepaged: convert alloc_charge_hpage() to use folios")
da6e7bf3a031 ("mm: convert prep_transhuge_page() to folio_prep_large_rmappable()")
8dc4a8f1e038 ("mm: convert free_transhuge_folio() to folio_undo_large_rmappable()")
dd6fa0b61814 ("mm: call free_huge_page() directly")
1e3be4856f49 ("mm/folio: replace set_compound_order with folio_set_order")
c33c794828f2 ("mm: ptep_get() conversion")
b95826c9aa48 ("mm: remove set_compound_page_dtor()")
c7ad08804fae ("mm/memory: handle_pte_fault() use pte_offset_map_nolock()")
3db82b9374ca ("mm/memory: allow pte_offset_map[_lock]() to fail")
895f5ee464cc ("mm/khugepaged: allow pte_offset_map[_lock]() to fail")
c9c1ee20ee84 ("mm/huge_memory: split huge pmd under one pte_offset_map()")
4b56069c95d6 ("mm/migrate_device: allow pte_offset_map_lock() to fail")
d850fa729873 ("mm/swapoff: allow pte_offset_map[_lock]() to fail")
f3cd4ab0aabf ("mm/madvise: clean up pte_offset_map_lock() scans")
04dee9e85cf5 ("mm/various: give up if pte_offset_map[_lock]() fails")
