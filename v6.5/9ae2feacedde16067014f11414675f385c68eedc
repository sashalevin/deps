9ae2feacedde ("mm: use folio_add_new_anon_rmap() if folio_test_anon(folio)==false")
15bde4abab73 ("mm: extend rmap flags arguments for folio_add_new_anon_rmap")
508758960b8d ("mm: swap: entirely map large folios found in swapcache")
29f252cdc293 ("mm: introduce arch_do_swap_page_nr() which allows restore metadata for nr pages")
15c0536fb57f ("mm: rmap: abstract updating per-node and per-memcg stats")
4f687281012e ("mm: do not update memcg stats for NR_{FILE/SHMEM}_PMDMAPPED")
7491f3f34891 ("mm/rmap: do not add fully unmapped large folio to deferred split list")
ec33687c6749 ("mm: add per-order mTHP anon_fault_alloc and anon_fault_fallback counters")
085ff35e7636 ("mm: memory: move mem_cgroup_charge() into alloc_anon_folio()")
e78a13fd16bb ("mm/rmap: rename COMPOUND_MAPPED to ENTIRELY_MAPPED")
b06dc281aa99 ("mm/rmap: introduce folio_remove_rmap_[pte|ptes|pmd]()")
84f0169e6c8a ("mm/rmap: remove page_add_anon_rmap()")
b832a354d787 ("mm/memory: page_add_anon_rmap() -> folio_add_anon_rmap_pte()")
da7dc0afe243 ("mm/swapfile: page_add_anon_rmap() -> folio_add_anon_rmap_pte()")
8bd5130070fb ("mm/rmap: introduce folio_add_anon_rmap_[pte|ptes|pmd]()")
96fd74958c55 ("mm/rmap: factor out adding folio mappings into __folio_add_rmap()")
be6e57cfabe9 ("mm/rmap: remove page_add_file_rmap()")
68f0320824fa ("mm/rmap: convert folio_add_file_rmap_range() into folio_add_file_rmap_[pte|ptes|pmd]()")
a4ea18641d83 ("mm/rmap: add hugetlb sanity checks for anon rmap handling")
44887f399455 ("mm/rmap: introduce and use hugetlb_add_file_rmap()")
