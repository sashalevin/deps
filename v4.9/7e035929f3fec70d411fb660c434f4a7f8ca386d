7e035929f3fe ("perf trace: Postpone parsing .perfconfig trace.add_events to after --verbose is processed")
012749caf941 ("perf trace: Exit when failing to build eBPF program")
b036146fd0f9 ("perf trace: Allow configuring if the syscall start timestamp should be printed")
42e4a52d01d0 ("perf trace: Allow configuring if the syscall duration should be printed")
e7c634fcc6ff ("perf trace: Allow configuring if zeroed syscall args should be printed")
ac96287cae08 ("perf trace: Allow specifying a set of events to add in perfconfig")
b27b38ed9427 ("perf trace: Implement syscall filtering in augmented_syscalls")
246fbe03edaa ("perf trace: Rename set_ev_qualifier_filter to clarify its a tracepoint filter")
028713aa8389 ("perf trace: Add ordered processing")
1f44b3e2fc5d ("perf trace: Move event delivery to a new deliver_event() function")
a9964c432bcc ("perf trace: Fill in BPF "filtered_pids" map when present")
744fafc787de ("perf trace: See if there is a map named "filtered_pids"")
7ad92a3371e1 ("perf evlist: Rename perf_evlist__set_filter* to perf_evlist__set_tp_filter*")
ed9a77ba7703 ("perf augmented_syscalls: Use pid_filter")
66067538e042 ("perf augmented_syscalls: Remove needless linux/socket.h include")
55f127b43143 ("perf augmented_syscalls: Filter on a hard coded pid")
79ef68c7e1f6 ("perf augmented_syscalls: Start collecting pathnames in the BPF program")
febf8a3712e4 ("perf examples bpf: Start augmenting raw_syscalls:sys_{start,exit}")
b1a9e2535e20 ("perf trace: Use the raw_syscalls:sys_enter for the augmented syscalls")
6dcbd212ff49 ("perf trace: Extract the comm/tid printing for syscall enter")
d3d1c4bdf5a7 ("perf trace: Setup the augmented syscalls bpf-output event fields")
e0b6d2ef3290 ("perf trace: Handle "bpf-output" events associated with "__augmented_syscalls__" BPF map")
d32855fa35b9 ("perf trace: Setup struct syscall_tp for syscalls:sys_{enter,exit}_NAME events")
63f11c80e5dd ("perf trace: Rename some syscall_tp methods to raw_syscall")
6a648b534d3d ("perf trace: Associate vfs_getname()'ed pathname with fd returned from 'openat'")
b912885ab75c ("perf trace: Do not require --no-syscalls to suppress strace like output")
0019dc87b928 ("perf mmap: Simplify perf_mmap__read_event()")
d6ace3df4304 ("perf mmap: Simplify perf_mmap__consume()")
bdec8b2f7eed ("perf mmap: Use stored 'overwrite' in perf_mmap__consume()")
b9de0f6e507b ("perf mmap: Use the stored data in perf_mmap__read_event()")
07a9461da672 ("perf mmap: Use the stored scope data in perf_mmap__push()")
9ea42ba4411a ("perf trace: Support setting cgroups as targets")
759487307625 ("perf test: Switch to new perf_mmap__read_event() interface for task-exit")
ee4024ff8582 ("perf test: Switch to new perf_mmap__read_event() interface for switch-tracking")
5d0007cdfc66 ("perf test: Switch to new perf_mmap__read_event() interface for sw-clock")
9dfb85dfaffe ("perf test: Switch to new perf_mmap__read_event() interface for time-to-tsc")
88e37a4bbe6e ("perf test: Switch to new perf_mmap__read_event() interface for perf-record")
1d1b5632ed0b ("perf test: Switch to new perf_mmap__read_event() interface for tp fields")
334f823e2ab5 ("perf test: Switch to new perf_mmap__read_event() interface for mmap-basic")
693d32aebf85 ("perf test: Switch to new perf_mmap__read_event() interface for "keep tracking" test")
00fc2460e735 ("perf test: Switch to new perf_mmap__read_event() interface for 'code reading' test")
2f54f3a4733c ("perf test: Switch to new perf_mmap__read_event() interface for bpf")
35b7cdc6379e ("perf python: Switch to new perf_mmap__read_event() interface")
d7f55c62e634 ("perf trace: Switch to new perf_mmap__read_event() interface")
53172f9057e9 ("perf kvm: Switch to new perf_mmap__read_event() interface")
ebebbf082357 ("perf top: Switch default mode to overwrite mode")
63878a53cedc ("perf top: Check per-event overwrite term")
600a7cfe88de ("perf test: Update mmap read functions for backward-ring-buffer test")
7bb45972952d ("perf mmap: Introduce perf_mmap__read_event()")
189f2cc91f9f ("perf mmap: Add new return value logic for perf_mmap__read_init()")
