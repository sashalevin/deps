137f59d5dab4 ("can: at91_can: switch to rx-offload implementation")
dd94a2f1f2f8 ("can: at91_can: at91_alloc_can_err_skb() introduce new function")
9df2faf947bc ("can: at91_can: at91_irq_err_line(): make use of can_change_state() and can_bus_off()")
f13e86993d85 ("can: at91_can: at91_irq_err_line(): take reg_sr into account for bus off")
910f179aa0de ("can: at91_can: at91_irq_err_line(): make use of can_state_get_by_berr_counter()")
efad777c3e97 ("can: at91_can: at91_irq_err(): rename to at91_irq_err_line()")
e0c9db91d60b ("can: at91_can: at91_irq_err_frame(): move next to at91_irq_err()")
d3f4cf05402b ("can: at91_can: at91_irq_err_frame(): call directly from IRQ handler")
aa3f5d935cbb ("can: at91_can: at91_poll_err(): increase stats even if no quota left or OOM")
864c6f07d3c4 ("can: at91_can: at91_poll_err(): fold in at91_poll_err_frame()")
3ecc09856afb ("can: at91_can: add CAN transceiver support")
99f4ff41bbb0 ("can: at91_can: at91_open(): forward request_irq()'s return value in case or an error")
8227088cb3c2 ("can: at91_can: at91_chip_start(): don't disable IRQs twice")
2f1a01a82fca ("can: at91_can: rename struct at91_priv::{tx_next,tx_echo} to {tx_head,tx_tail}")
bdfff1433cd6 ("can: at91_can: MSR Register: convert to FIELD_PREP()")
e26ccc4658c1 ("can: at91_can: use a consistent indention")
6c1e423a3c84 ("can: can-dev: remove obsolete CAN LED support")
caf6b7f81e05 ("can: can-dev: move to netif_napi_add_weight()")
2dcb8e8782d8 ("can: ctucanfd: add support for CTU CAN FD open-source IP core - bus independent part.")
