b6769834aac1 ("mm/thp: narrow lru locking")
c4f9c701f9b4 ("mm: fix a race during THP splitting")
8cce54756806 ("mm/huge_memory: fix split assumption of page size")
8fb156c9ee2d ("mm/page_owner: change split_page_owner to take a count")
67e4eb076840 ("mm: thp: don't need to drain lru cache when splitting and mlocking THP")
afb971729a0b ("mm/huge_memory.c: reduce critical section protected by split_queue_lock")
a8803e6c177f ("mm/huge_memory.c: use head to emphasize the purpose of page")
cb829624867b ("mm/huge_memory.c: use head to check huge zero page")
06d3eff62d9d ("mm/thp: fix node page state in split_huge_page_to_list()")
5556cfe8d994 ("mm, page_owner: fix off-by-one error in __set_page_owner_handle()")
87eaceb3faa5 ("mm: thp: make deferred split shrinker memcg aware")
364c1eebe453 ("mm: thp: extract split_queue_* into a struct")
4101196b19d7 ("mm: page cache: store only head pages in i_pages")
8974558f49a6 ("mm, page_owner, debug_pagealloc: save and dump freeing stack trace")
37389167a281 ("mm, page_owner: keep owner info when freeing the page")
7e2f2a0cd17c ("mm, page_owner: record page owner for each subpage")
f7da677bc6e7 ("mm, page_owner: handle THP splits correctly")
3972f6bb1c6a ("mm, debug_pagealloc: use a page type instead of page_ext flag")
4462b32c9285 ("mm, page_alloc: more extensive free page checking with debug_pagealloc")
69bf4b6b54fb ("Revert "mm: page cache: store only head pages in i_pages"")
5fd4ca2d84b2 ("mm: page cache: store only head pages in i_pages")
af52bf6b92f7 ("mm/page_owner: Simplify stack trace handling")
4621c9858f05 ("mm/page_owner: Remove the ULONG_MAX stack trace hackery")
f4b7e272b5c0 ("mm: remove zone_lru_lock() function, access ->lru_lock directly")
cb2dcaf023c2 ("mm, compaction: finish pageblock scanning on contention")
804d3121ba5f ("mm, compaction: avoid rescanning the same pageblock multiple times")
e380bebe4771 ("mm, compaction: keep migration source private to a single compaction instance")
70b44595eafe ("mm, compaction: use free lists to quickly locate a migration source")
efe771c7603b ("mm, compaction: always finish scanning of a full pageblock")
40cacbcb3240 ("mm, compaction: remove unnecessary zone parameter in some instances")
566e54e113eb ("mm, compaction: remove last_migrated_pfn from compact_control")
c5943b9c5312 ("mm, compaction: rearrange compact_control")
c5fbd937b603 ("mm, compaction: shrink compact_control")
14ef1fc72a3e ("mm/filemap.c: remove redundant test from find_get_pages_contig")
98fa15f34cb3 ("mm: replace all open encodings for NUMA_NO_NODE")
e0975b2aae0e ("mm, fault_around: do not take a reference to a locked page")
006d3ff27e88 ("mm/huge_memory: fix lockdep complaint on 32-bit i_size_read()")
906f9cdfc2a0 ("mm/huge_memory: rename freeze_page() to unmap_page()")
57c8a661d95d ("mm: remove include/linux/bootmem.h")
97ad1087efff ("memblock: replace BOOTMEM_ALLOC_* with MEMBLOCK variants")
c6ffc5ca8fb3 ("memblock: rename free_all_bootmem to memblock_free_all")
53ab85ebfd27 ("memblock: replace free_bootmem_late with memblock_free_late")
2013288f7238 ("memblock: replace free_bootmem{_node} with memblock_free")
6c7835f8d0d1 ("mm: nobootmem: remove bootmem allocation APIs")
4fc4a09e4cc1 ("memblock: replace __alloc_bootmem with memblock_alloc_from")
ccfa2a0f2e85 ("memblock: replace __alloc_bootmem_node with appropriate memblock_ API")
3913c8f9f96b ("memblock: add align parameter to memblock_alloc_node()")
bf2886efdc1b ("memblock: replace __alloc_bootmem_node_nopanic with memblock_alloc_try_nid_nopanic")
eb31d559f1e8 ("memblock: remove _virt from APIs returning virtual address")
9a8dd708d547 ("memblock: rename memblock_alloc{_nid,_try_nid} to memblock_phys_alloc*")
