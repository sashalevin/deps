a23f517b0e15 ("mm: convert mm_counter() to take a folio")
eabafaaa9575 ("mm: convert to should_zap_page() to should_zap_folio()")
530c2a0da0b4 ("mm: use pfn_swap_entry_folio() in copy_nonpresent_pte()")
0601ac883a81 ("s390: use pfn_swap_entry_folio() in ptep_zap_swap_entry()")
08e7795e2444 ("mm/memory: page_try_dup_anon_rmap() -> folio_try_dup_anon_rmap_pte()")
c46265030b0f ("mm/memory: page_remove_rmap() -> folio_remove_rmap_pte()")
ec8832d007cb ("mmu_notifiers: don't invalidate secondary TLBs as part of mmu_notifier_invalidate_range_end()")
c33c794828f2 ("mm: ptep_get() conversion")
c7ad08804fae ("mm/memory: handle_pte_fault() use pte_offset_map_nolock()")
3db82b9374ca ("mm/memory: allow pte_offset_map[_lock]() to fail")
895f5ee464cc ("mm/khugepaged: allow pte_offset_map[_lock]() to fail")
c9c1ee20ee84 ("mm/huge_memory: split huge pmd under one pte_offset_map()")
4b56069c95d6 ("mm/migrate_device: allow pte_offset_map_lock() to fail")
d850fa729873 ("mm/swapoff: allow pte_offset_map[_lock]() to fail")
f3cd4ab0aabf ("mm/madvise: clean up pte_offset_map_lock() scans")
04dee9e85cf5 ("mm/various: give up if pte_offset_map[_lock]() fails")
0d1c81edc61e ("mm/vmalloc: vmalloc_to_page() use pte_offset_kernel()")
7780d04046a2 ("mm/pagewalkers: ACTION_AGAIN if pte_offset_map_lock() fails")
2798bbe75b9c ("mm/page_vma_mapped: pte_offset_map_nolock() not pte_lockptr()")
90f43b0a13cd ("mm/page_vma_mapped: reformat map_pte() with less indentation")
